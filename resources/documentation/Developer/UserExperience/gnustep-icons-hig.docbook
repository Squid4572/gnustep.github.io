<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1//EN"> 
<!-- "docbook/dtd/xml/4.2/docbookx.dtd" "/sw/share/sgml/dtd/docbook/4.1/docbook.dtd" "/sw/share/xml/dtd/docbookx/4.2.0/docbookx.dtd" -->

<!--
<?stylesheet href="./GNUstep-documentation-docbook.dsl" style="text/dsssl">
-->
<book>

<!-- Book description -->

<bookinfo>
<title>GNUstep Icons UI guidelines</title>
<author><firstname>Quentin</firstname> <surname>Math&eacute;</surname> 
<affiliation>
<address>&lt;qmathe@club-internet.fr&gt;</address>
</affiliation>
</author>
<author><firstname>Nicolas</firstname> <surname>Roard</surname> 
<affiliation>
	<address>&lt;nicolas@roard.com&gt;</address>
</affiliation>
</author>
</bookinfo>

<!-- New chapter -->

<chapter id="introduction">
<title>Introduction</title>

<!-- New section -->

<sect1 id="overview"><title>General overview</title>
<para>
This document describes the ideas behind the GNUstep standard icons, ideas which should be the foundations for the application's icons you will create. 
</para>
<para>
High quality icon are a key part of the GNUstep user experience, so you should take the time to create (possibly with the help of experienced icons creators) carrefully thought, visually appealing and expressive icons, because they are the primary thing the user will see and interact with. Moreover nice icons are the easiest way to enhance your applications with a professional look.
</para>
<para>
The emotional quality of an icon reflects its capacity to convey informations even out of its context. You should create new icons with this philosophy in the mind: photorealistic icons with the expressivity of an illustration.
</para>
<para>
More importantly, your icons should follow as strictly as possible the guidelines described in this document, in order to enhance the user experience by providing the best consistency possible in the GNUstep environment.
</para>
</sect1>

<!-- New section -->

<sect1 id="iconkit"><title>What's technically possible</title>
<para>
GNUstep GUI framework permits to have basic icons support. More complex GNUstep icons support is based on the IconKit framework. IconKit handles icons either vectorial or bitmapped (with size varying from 16*16 to 64*64) with eight bits alpha channel, and by using antialiasing and interpolation IconKit is able to scale icons smoothly. IconKit permits other advanced things like on the fly icons badging/compositing.
</para>
<para>
It is advised to use the IconKit framework, as it will help you creating your icons and managing them.
</para>
</sect1>

</chapter>

<!-- New chapter -->

<chapter id="general">
<title>General ideas</title>

<!-- New section -->

<sect1 id="icon-but-why">
<title>What does the icon concept try to solve ?</title>
<para>
An icon provides:
<itemizedlist>
<listitem><para>Visual representation, which can speed or replace the necessity of reading the text label.</para></listitem>
<listitem><para>Fast distinctive representation, which accelerates by a high factor the iteration in a large number of objects to obtain the desired object; we see a lot faster than we read.</para></listitem>
</itemizedlist>
</para>

<!-- New subsection -->

<sect2 id="guidelines">
<title>Guidelines</title>
<para>
Theses two aspects of the icons perception by the human visual system becomes more effective with the establishment of visual habits which permits to associate more quickly an icon to an object, a state or an action.
</para>
<para>
Icons guidelines help the user to adopt theses visual habits by promoting consistency. Guidelines provides common representations or ideas the user could associate to specific concepts. Theses representations could be numerous: colors, particular graphic elements, graphic style, etc.
</para>
</sect2>

</sect1>

<!-- New section -->

<sect1 id="readability">
<title>Readability</title>
<para>
The primary goal of an icon is to convey information. The best way to achieve that is to use a limited set of concepts in an icon: simplicity should be your goal. Schematic design is generally a good idea; but if you want to use a photorealistic look, pay attention of not beeing too much realistic or over-realistic: your icons should be easily readable.
</para>
<para>
Icons should look emotive but not artificially transparent, reflective or metallic.
In order to achieve that, keep in mind the two advices below:
<itemizedlist>
<listitem><para>use gradients sparingly when you design your icons.</para></listitem>
<listitem><para>use shadows and transparence sparingly when you are dealing with the finishing touch.</para></listitem>
</itemizedlist>
</para>
<para>
Last point, the icons should also be designed for graceful degradation when they are scaled. To achieve that, be sure to create your icons with an outline (what permits to keep the different objects used in the icon distinct) still visible at size like 16*16 by having more emphasis on the line weight and/or contrast than the patterns, lighting and gradients; thr patterns, lighting and gradients which should gradually blur when the icons are scaled down. When needed, don't hesitate to create specific icons representations for the sizes like 16*16 and 32*32.</para>
</sect1>

<!-- New section -->

<sect1 id="breath">
<title>Let them breath!</title>
<para>
You should never create icons directly in contact with the border of their frame, because in many cases an icon can be side by side with other icons, like in a toolbar or a dock-like application. Use a two pixels margin at least between the frame and the icon itself.
</para>
</sect1>

<!-- New section -->

<sect1 id="appearence">
<title>Appearance</title>

<!-- New subsection -->

<sect2 id="perspectives">
<title>Perspectives</title>
<para>
An icon generally displays one or more objects, and one of the important choice is how you represent the objects in term of perspective (2D or 3D).
<itemizedlist>
    <listitem>
        <para>
            <emphasis>isometric 3D view:</emphasis>
            The object is viewed in a classic 3D isometric view.
            The light source should be positionned in the top front, a bit over the camera (not in the same position).</para>
<table>
<title>3D Isometric view examples</title>
<tgroup cols="2">
<thead>
<row>
<entry>
Home icon
</entry>
<entry>
Hard disk icon
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<inlinemediaobject><imageobject><imagedata fileref="./home.png" format="PNG" scale="100"></imageobject></inlinemediaobject>
</entry>
<entry>
<inlinemediaobject><imageobject><imagedata fileref="./harddisk3d.png" format="PNG" scale="100"></imageobject></inlinemediaobject>
</entry>
</row>
</tbody>
</tgroup>
</table>
    </listitem>
    <listitem>
        <para>
            <emphasis>2D view (like sitting on a shelf):</emphasis>
            The object is viewed as a plane in front of the camera. Depending on the object, it could be a front view (imagine a book for instance) or a top view (a keyboard).
            The light source should be positionned in front or on top, in the same position than the camera.</para>
            <table>
<title>2D view examples</title>
<tgroup cols="2">
<thead>
<row>
<entry>
Book icon
</entry>
<entry>
Hard disk icon
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
            <inlinemediaobject><imageobject><imagedata fileref="./book.png" format="PNG" scale="100"></imageobject></inlinemediaobject>
</entry>
<entry>
            <inlinemediaobject><imageobject><imagedata fileref="./harddisk2d.png" format="PNG" scale="100"></imageobject></inlinemediaobject>
</entry>
</row>
</tbody>
</tgroup>
</table>
    </listitem>
    </itemizedlist>
</para>
<para>
2D icons are a better choice when you display a lot of similar icons, while 3D icons tends to stand-out.
Thus, GNUstep icons should use a 3D view for important or relatively rare icons like the applications icons or the locations related icons such as a home directory, a hard disk, a server (WebDav, FTP, etc.), a camera...
Very common and repetitive locations related icons like a standard folder should be represented with a 2D view but must then use a 30 degrees counter-clockwise rotation (so they still stand-out in comparison of other icons).</para>
<mediaobject><imageobject><imagedata fileref="./folder.png" format="PNG" scale="100"></imageobject></mediaobject>
<!-- Illustration : the standard folder looking standing on one of its corners -->
<para>Any other icons like the documents icons, the toolbar icons and the buttons icons should use a 2D view (to know more about that, read <xref linkend="toolbar-principles"/>).</para>
</sect2>

<!-- New subsection -->

<sect2 id="colors">
<title>Special colors</title>
<para>
While we shouldn't try to rely too much on them (as some people has colors perception problems), 
colors are a very efficient indicator, and could add meaning to an icon. 
</para>
<para>
The icons which triggers a potentially destructive action (like Cancel, Delete, Erase etc.) should be partially red. The icons which triggers or warns about a exceptional or really special action (like Connect/Disconnect, Move to trash, Remember, Test etc.) should be partially yellow. 
</para>
<para>
When you layout a window outside the toolbar, try to use as much as possible traditionnal controls and not special icons. For the buttons, when you want a more visual, intuitive look, it is important to not use small colored icons, but monochromatic dark gray images to avoid too much visual distraction.
</para>
</sect2>

<!-- New subsection -->

<sect2 id="composition">
<title>Icons composition and badge support</title>
<para>
IconKit offers the possibility to composite icons with different elements to obtain final icons easily. For example, you could use this mechanism to easily build icons with common look. In the same way, IconKit lets you composite small graphical elements which are called badges on the fly  over an existing icon (that could be used to mark a document as urgent, or locked, etc.).
</para>
<para>
Example : toolbar icons in a mail application like Reply, Forward etc. can be based on single a icon element (like a message icon) and with the help of the composition method, the final look of the icons will be specified by rendering different sort of arrows over the primary icon element.
</para>
<sect3 id="family">
<title>Icons family</title>
<para>
Icons composition is used to implement simple icon family support, which you can customize to better fit the final look you desire. By default when you link to the IconKit, default documents, preferences and plugins icons are created by badging documents, preferences and plugins templates icons with the application icon. But you have the possibility to override this behavior by importing your own icons in your application project.
</para>
</sect3>
</sect2>

</sect1>

<!-- New section -->

<sect1 id="recognition">
<title>Universal recognition</title>
<para>
Important rule: keep the application icon not cluttered, too much details add noise to the visual recognition and make the memorizing process more random.
</para>
<para>
<itemizedlist>
<listitem><para>Don't strictly rehash the name in the representation. In the case, the application's name doesn't illustrate its role, don't create an icon which is a pure illustration of the application's name, it would add a visual abstraction layer which would slow the possibility to remember easily what an application is useful for.</para>
<para>Example : A web browser called "Duck" shouldn't use a duck representation for its icon, however it is ok to integrate a duck element to an icon with its own semantic.</para></listitem>
<listitem><para>Don't bind the icons to a linguistic related comprehension/recognition. The translation is an important issue, then we should have no obligatory connection between an icon itself and its label. In the same perspective, take by example in account that words play slows the user recognition by forcing him to observe and associate both the icon and the text label to deduce what the application is useful for.</para>
<para>Example : A spider web representation used in a Web browser application icon.</para></listitem>
<listitem><para>Don't use text words in the icons, this recommandation is related to the previous one . Take in account that icons would be difficult to translate, and harder to read than in the label. When you want use text in the icon, don't use real words in a specific language (or use a dead language like latin).</para>
<para>Example : A file icon shouldn't integrate a type text representation like TIFF or RTF, it is the job of the Workspace application to show the label, the type and other attributes.</para></listitem>
<listitem><para>Don't limit the icons to a mascot or a logo, when the mascot choice seems to be random in relation with application role. The cool factor with the icon creation process shouldn't be what you are looking for, but just a very desirable side effect.</para>
<para>Example : the IM application Adium use a Duck for its icon, it's pure cool factor, but this factor confuses the user. What an application with a duck icon can do ?</para></listitem>
<listitem><para>Don't use violent imagery. Some users would be scared to click on such icon by seeing it as a destructive action that could break whatever part of the system. Destructive icons or words like "kill" should be avoided also.</para></listitem>
</itemizedlist>
</para>
</sect1>

<!-- New section -->

<sect1 id="interaction">
<title>User interaction</title>

<!-- New subsection -->

<sect2>
<title>Principles</title>
<para>
Icons are visual representations or metaphors which permits to associate an object, an action or a state to them.
</para>
<para>
Two principles (how the user see it, click it) :
<itemizedlist>
<listitem><para>Views with icons representation should always rely on a square hit test area (which encloses the icon) when the user needs to manipulate them. Don't use something like the alpha channel as the hit area. See Fitt's law.</para></listitem>
<listitem><para>When you create files icons, you must take in account that the bottom part will probably be covered by a badge, then you must ensure that the key visual part is in the icon superior 2/3 part.</para></listitem>
</itemizedlist>
</para>
</sect2>

</sect1>

</chapter>

<!-- New chapter -->

<chapter id="usual-icons">
<title>Usual icons</title>

<!-- New section -->

<sect1 id="applications-icons">
<title>Application icons</title>
<para>
A simple and efficient way to design application icons is to use a verb which represents the application as the visual idea or metaphor basis. We detail this special design process below for the applications icons. Remember that applications should use a 3D isometric view unlike the documents icons in order to easily distinguish them.
</para>
<para>
<orderedlist numeration="upperalpha">
<listitem><para>When the main new possibility given by an application can be represented metaphorically or symbolically with a tool, you should add an adequate tool representation to the icon.</para>
<para>Examples : with a development environment, you can use a screw driver, with a word processor, you can use a pen, with a library like application, you can use a magnifying glass.</para></listitem>
<listitem><para>When the application is document/media oriented, the essential part of the icon background should be constitued by an adequate (habitually left inclined) document/media representation.</para>
<para>Example : with an image manipulation application, you can use a photo as the background, with a layout page application, you can use magazine page as the background, with a sound application, you can use waveform sound representation as the background.</para>
<mediaobject><imageobject><imagedata fileref="./scissors.png" format="PNG" scale="100"></imageobject></mediaobject></listitem>
<listitem><para>When the main new possibility given by an application matches a real object (calculator, chess game etc.), you should organize your icon around an adequate representation of the real object.</para></listitem>
<listitem><para>When the main new possibility given by an application is an interaction with a physical device (camera, tablet, coffee machine etc.), you should add an adequate representation of the physical device to the icon.</para>
<mediaobject><imageobject><imagedata fileref="./camerawithcolors.png" format="PNG" scale="100"></imageobject></mediaobject></listitem>
</orderedlist>
</para>
<para>An application icon will combine most of time two of the recommendations described above, sometimes three, but you should avoid to mix the four recommendations together. </para>
<para>Examples : with a movie editing application, the left background can be a set of images and the physical device on the right a camcorder, with a calculator application, the left background can be a paper with additions and other formulas and the real object on the right a calculator itself.</para>
</sect1>

<!-- New section -->

<sect1 id="document-icons">
<title>Document icons</title>
<para>
Document icons doesn't have a specific representation, but the representation which is automatically provided by the IconKit is a paper with its top right corner folded down marked with a badge which represents the application. Remember that documents icons should use a front view (it's important to use no 3D effects).
</para>
</sect1>

<!-- New section -->

<sect1 id="plugin-icons">
<title>Plugin icons</title>
<para>
Plugins icon should look like a stackable cube component, by default the IconKit pust the appropriate application icon badge over. Plugins icons should use a 3D isometric view, taking in account the fact that technically speaking they are applications components.
</para>
<table>
<title>Plugin related composition example</title>
<tgroup cols="2">
<thead>
<row>
<entry>
Plugin template
</entry>
<entry>
Plugin icon by compositing an application icon
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<inlinemediaobject><imageobject><imagedata fileref="./cube.png" format="PNG" scale="100"></imageobject></inlinemediaobject>
</entry>
<entry>
<inlinemediaobject><imageobject><imagedata fileref="./cubewithpaper.png" format="PNG" scale="100"></imageobject></inlinemediaobject>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect1>

<!-- New section -->

<sect1 id="media-device-icons">
<title>Media/device icons</title>
<para>
We can characterize them by the fact they are objects related to the computer universe. Medias and devices doesn't have a specific representation, but&#133; Remember that physical medias or devices like hard disk, floppy, printers, monitors, headsets etc. should use a 3D isometric view (in order to ease the association with real world object). Remember also that things with a location semantic like a server, a hard disk (except a folder) should be depicted in the same way with a 3D isometric view.
</para>
</sect1>

<!-- New section -->

<sect1 id="toolbar-icons">
<title>Toolbar icons</title>
<sect2 id="toolbar-principles">
<title>Principles</title>
<para>
<itemizedlist>
<listitem><para>the used icons must be easily distinguishable between them.
To ensure that, vary the icons shapes as much as possible because they are primary way used by the human visual system to distinguish between them before the colors or the representation itself.</para></listitem>
<listitem><para>the used icons must be exclusively front view or top view representations. Use 3D isometric view only when what you want to represent is precisely matched by a GNUstep standard icon.</para>
<para>Example : home folder icon which is designed in a 3D isometric view can be used in the toolbar to represent the home folder itself.</para>
<para>Warning : don't use the home folder icon to represent the home address in an address book application, create an icon with a new look viewed from the front for this use.</para></listitem>
<listitem><para>the used icons must use standard GNUstep icons when it is possible/adequate. The IconKit provides standard GNUstep stock icons which have been created to be commonly used accross GNUstep applications. As such, don't create icon variations of the standard GNUstep icons to use in your application, except for the composited icons like the document and plugin icons.</para></listitem>
</itemizedlist>
</para>
<para>
Toolbar icons aren't on the border on the screen then doesn't provide infinite target (see Fitt's laws), then they use a 32*32 size larger than 16*16. Take note that you have the possibility to switch to reduced size 24*24 or to a text representation but that isn't the default.
</para>
</sect2>
</sect1>

<!-- New section -->

<sect1 id="default-icons">
<title>Default icons</title>
<para>
GNUstep default installation comes with a set of stock icons which can be used by the GNUstep frameworks itself or the applications you develop.
There are two icons set which are delinated by their size 32*32 and 64*64.
</para>
<para>
Icons set with 32*32 size :
<itemizedlist>
<listitem><para>Customize (toolbar)</para></listitem>
<listitem><para>Fonts (toolbar)</para></listitem>
<listitem><para>Color (toolbar)</para></listitem>
<listitem><para>Print (toolbar)</para></listitem>
<listitem><para>Space (toolbar)</para></listitem>
<listitem><para>Flexible (toolbar)</para></listitem>
<listitem><para>Separator (toolbar)</para></listitem>
<listitem><para>Help</para></listitem>
<listitem><para>Undo</para></listitem>
<listitem><para>Redo</para></listitem>
<listitem><para>Zoom</para></listitem>
<listitem><para>Unzoom</para></listitem>
<listitem><para>Back</para></listitem>
<listitem><para>Forward</para></listitem>
<listitem><para>Add bookmark</para></listitem>
<listitem><para>Bookmarks</para></listitem>
<listitem><para>Addresses</para></listitem>
<listitem><para>Preview</para></listitem>
<listitem><para>Stop</para></listitem>
<listitem><para>Reload</para></listitem>
<listitem><para>Record</para></listitem>
<listitem><para>Play</para></listitem>
<listitem><para>Pause</para></listitem>
<listitem><para>Cancel</para></listitem>
<listitem><para>Add/New</para></listitem>
<listitem><para>Remove</para></listitem>
<listitem><para>Delete</para></listitem>
<listitem><para>Send</para></listitem>
<listitem><para>Search</para></listitem>
<listitem><para>Bold</para></listitem>
<listitem><para>Italic</para></listitem>
<listitem><para>Underline</para></listitem>
<listitem><para>Left alignment</para></listitem>
<listitem><para>Centered alignment</para></listitem>
<listitem><para>Right alignment</para></listitem>
<listitem><para>Justified alignment</para></listitem>
<listitem><para>Preferences</para></listitem>
<listitem><para>Informations</para></listitem>
<listitem><para>Warning</para></listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Appearance</para></listitem>
<listitem><para>Desktop</para></listitem>
<listitem><para>Display</para></listitem>
<listitem><para>Sound</para></listitem>
<listitem><para>Mouse</para></listitem>
<listitem><para>Keyboard</para></listitem>
<listitem><para>Energy</para></listitem>
<listitem><para>Security</para></listitem>
<listitem><para>User</para></listitem>
<listitem><para>Users</para></listitem>
<listitem><para>Network</para></listitem>
<listitem><para>Internet</para></listitem>
<listitem><para>Date and Time</para></listitem>
<listitem><para>Startup</para></listitem>
</itemizedlist>
</para>
<para></para>
<para>
Icons set with 64*64 size :
<itemizedlist>
<listitem><para>Command line tool</para></listitem>
<listitem><para>Not defined application</para></listitem>
<listitem><para>Preferences like application</para></listitem>
<listitem><para>Not defined file</para></listitem>
<listitem><para>Not defined font file</para></listitem>
<listitem><para>Not defined folder</para></listitem>
<listitem><para>Not defined hard disk</para></listitem>
<listitem><para>CD/DVD disk</para></listitem>
<listitem><para>Home Folder</para></listitem>
<listitem><para>System Folder</para></listitem>
<listitem><para>URL file</para></listitem>
<listitem><para>Text file (with variations not defined xml, c, java etc., probably by using a badge)</para></listitem>
<listitem><para>Image file</para></listitem>
<listitem><para>Sound file</para></listitem>
<listitem><para>Video file</para></listitem>
<listitem><para>Compressed/Archived file (with variations tar, zip, gz etc., probably by using a badge)</para></listitem>
<listitem><para>Plugin/Bundle file</para></listitem>
<listitem><para>HTML file</para></listitem>
<listitem><para>RTF file</para></listitem>
<listitem><para>PDF fle</para></listitem>
<listitem><para>PS file</para></listitem>
<listitem><para>Gorm application (not sure)</para></listitem>
<listitem><para>Terminal application (not sure)</para></listitem>
<listitem><para>Mail application (to be used also as a generic mail icon)</para></listitem>
<listitem><para>Web application (to be used also as a generic web icon)</para></listitem>
</itemizedlist>
</para>
</sect1>

</chapter>

</book>

